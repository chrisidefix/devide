#!/usr/bin/env python
# $Id: dscas3,v 1.19 2002/04/23 16:26:08 cpbotha Exp $

import os
import sys

from assistants import assistants
from graph_editor import graph_editor
from module_manager import module_manager
from python_shell import python_shell

from wxPython.wx import *
from wxPython.xrc import *

class main_window(wxFrame):
    """Main dscas3 application window.

    This is class representing the main dscas3 window.  As is the convention
    with dscas3, the UI derivatives (like this window) will handle all UI
    and hand over to other code as soon as the transaction becomes UI
    independent.
    """

    def __init__(self, dscas3_app):
        # bind the app name so we can get to it for events
        self.dscas3_app = dscas3_app
        
        wxFrame.__init__(self, None, -1, "dscas3")


        res_path = os.path.join(sys.path[0], 'resources/xml/dscas3_main.xrc')
        self._res = wxXmlResource(res_path)

        menubar = self._res.LoadMenuBar('MBAR_MAIN_WINDOW')
        EVT_MENU(self, XMLID('ID_EXIT_MI'), self.exit_cb)
        EVT_MENU(self, XMLID('ID_PYTHON_SHELL_MI'), self.python_shell_cb)
        self.SetMenuBar(menubar)
        
        panel = self._res.LoadPanel(self, 'PNL_MAIN_WINDOW')
        del self._res # we have what we need

        # get out status statictext and progress gauge so we can use these
        self._status_stxt = XMLCTRL(self, 'ID_STATUS_STXT')
        self._progress_gauge = XMLCTRL(self, 'ID_PROGRESS_GAUGE')
        # set them up to some sane values
        self.set_status_message('Started up.')
        self.set_progress_gauge(100)

        # attach events to assistant buttons
        EVT_BUTTON(self, XMLID('ID_LOAD_DATA_BTN'), self.load_data_cb)

        # display ourselves
        self.Show(true)

    def set_status_message(self, message):
        self._status_stxt.SetLabel(message)

    def set_progress_gauge(self, progress):
        self._progress_gauge.SetValue(progress)

    def exit_cb(self, event):
        self.dscas3_app.quit()

    def load_data_cb(self, event):
        self.dscas3_app.get_assistants().load_data()

    def python_shell_cb(self, event):
        self.dscas3_app.start_python_shell()
        
class dscas3_app_t(wxApp):
    """Main dscas3 application class.

    Class that's used as communication hub for most other components of the
    platform.  We've derived from wxApp but this is not a requirement... we
    could just as well have contained the wxApp instance.  This inheritance
    does not prevent abstraction from the GUI.
    """
    
    def __init__(self):
        self.main_window = None
        
        wxApp.__init__(self, 0)

        self._assistants = assistants(self)
        self._python_shell = None
	
	# this will instantiate the module manager and get a list of plugins
	self.module_manager = module_manager()
	# then start up a default graph_editor
#	self.graph_editor = graph_editor(self)

    def OnInit(self):
        self.main_window = main_window(self)
        self.SetTopWindow(self.main_window)
        # "true" is defined in wxPython.wx
        return true
	
    def get_main_window(self):
        return self.main_window

    def get_module_manager(self):
	return self.module_manager

    def get_assistants(self):
        return self._assistants
	
    def quit(self):
	print "quit called!"
	# take care of main window
	self.main_window.Close()

    def start_python_shell(self):
        if self._python_shell == None:
            self._python_shell = python_shell(self)
        else:
            self._python_shell.show()
	

def main():
    dscas3_app = dscas3_app_t()
    dscas3_app.MainLoop()

if __name__ == '__main__':
    main()
    

#!/usr/bin/env python
# $Id: dscas3,v 1.16 2002/04/22 14:34:07 cpbotha Exp $

import sys
import Tkinter
import tkMessageBox
from Tkconstants import *
import Pmw

from graph_editor import graph_editor
from module_manager import module_manager

from wxPython.wx import *

class pyco_t:
    """Run-time Python interpreter class thingy.
    
    This is a class containing some of the functions needed for the Python 
    interaction.  Initially the idea was to run the python commands in this
    namespace, but that didn't pan out.  We're now running in the global
    nampspace.
    """
    
    def __init__(self, dscas3_main_instance):
	self.dscas3mi = dscas3_main_instance    
 
    def ol_exec(self, py_command):
	exec(py_command, globals())
	
    def text_exec(self, py_text):
	eval(compile("%s\n\n" % (py_text), '<string>', 'exec'), globals())

class dscas3_main_window_t(wxFrame):
    """Main dscas3 application window.

    This is class representing the main dscas3 window.  As is the convention
    with dscas3, the UI derivatives (like this window) will handle all UI
    and hand over to other code as soon as the transaction becomes UI
    independent.
    """

    def __init__(self, dscas3_app):
        # bind the app name so we can get to it for events
        self.dscas3_app = dscas3_app
        
        wxFrame.__init__(self, None, -1, "dscas3")

        # and of course the file submenu
        file_menu = wxMenu()

        exit_id = wxNewId()
        file_menu.Append(exit_id, 'E&xit', 'Exit DSCAS3')
        # event table associated with self, which id triggers it, what to do
        EVT_MENU(self, exit_id, self.dscas3_app.quit())

        # create the main menu bar to attach all these submenus to
        self.main_menu = wxMenuBar()
        # attach them things
        self.main_menu.Append(file_menu, '&File')
        # now tell this frame to use the created menubar
        self.SetMenuBar(main_menu)
        
        # display ourselves
        self.show(True)
        
class dscas3_app_t(wxApp):
    """Main dscas3 application class.

    Class that's used as communication hub for most other components of the
    platform.  We've derived from wxApp but this is not a requirement... we
    could just as well have contained the wxApp instance.  This inheritance
    does not prevent abstraction from the GUI.
    """
    
    def __init__(self, root):
	self.pyco = pyco_t(self)

        
	
	# interpreter input line
	self.pyco_ol = Pmw.ComboBox(self.root, label_text = 'python one-liner',
                                    labelpos = 'nw',
                                    selectioncommand=self.pyco.ol_exec)
	self.pyco_ol.pack(side=TOP, fill=X)
	
	self.pyco_text = Pmw.ScrolledText(self.root, borderframe = 1,
                                          labelpos = 'n',
                                          label_text='python code segments',
                                          usehullsize = 1,
                                          hull_width = 400, hull_height = 300,
                                          text_padx = 10, text_pady = 10,
                                          text_wrap='none')
	self.pyco_text.pack(side=TOP, fill=BOTH)
	
	# button box
	box = Pmw.ButtonBox(self.root)
	box.add('Execute OL', underline=0, command=lambda self=self:
                self.pyco.ol_exec(self.pyco.get()))
	box.add('Execute TXT', underline=0, command=lambda self=self:
                self.pyco.text_exec(self.pyco_text.get(1.0, END)))
	box.add('Quit', underline=0, command=self.quit)
	box.pack(side=TOP, fill=X, expand=1)
	
	# this will instantiate the module manager and get a list of plugins
	self.module_manager = module_manager()
	# then start up a default graph_editor
	self.graph_editor = graph_editor(self)

    def OnInit(self):
        self.dscas3_main_window = dscas3_main_window_t(self)
        self.SetTopWindow(self.dscas3_main_window)
        # "true" is defined in wxPython.wx
        return true
	
    def get_module_manager(self):
	return self.module_manager
	
    def quit(self):
	print "quit called!"
	# take care of main window
	self.dscas3_main_window.Close()
	

dscas3_app = dscas3_app_t(0)
dscas3_app.MainLoop()

# create main window
#root = Tkinter.Tk()
#Pmw.initialise(root, fontScheme = 'pmw1')
#d3m = dscas3_main(root)
# start event loop of main window
#root.mainloop()


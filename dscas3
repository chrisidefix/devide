#!/usr/bin/env python
import sys
import Tix
import tkMessageBox

from graph_editor import graph_editor
from module_manager import module_manager

class dscas3_main:
    def __init__(self, root):
	self.modules = []
	
	self.root = root
	self.root.title("dscas 3")
	# quit gets called if window gets closed
	self.root.protocol ("WM_DELETE_WINDOW", self.quit)
	
	# interpreter input line
	self.pyco = Tix.ComboBox(self.root, editable=Tix.TRUE, history=Tix.TRUE, anchor=Tix.E, command=self.pyco_exec)
	self.pyco.pack(side=Tix.TOP, fill=Tix.X)

	# button box
	box = Tix.ButtonBox(self.root, orientation=Tix.HORIZONTAL)
	box.add('ok', text='Quit', underline=0, width=6,
	command=self.quit)
	box.pack(side=Tix.TOP, fill=Tix.X, expand=1)
	
	# this will instantiate the module manager and get a list of plugins
	self.module_manager = module_manager()
	# then start up a default graph_editor
	self.graph_editor = graph_editor(self)
	
    def create_module(self, name):
	# it seems that objects instantiated in the try get destroyed in except(?)
	try:
	    # import the correct module
	    exec('from ' + name + ' import ' + name)
	    # then instantiate the requested class
	    exec('self.modules.append(' + name + '())')
	except ImportError:
	    tkMessageBox.showerror("Import error", "Unable to import module %s!" % name)
	    return None
	except Exception, e:
	    tkMessageBox.showerror("Instantiation error", "Unable to instantiate module %s: %s" % (name, str(e)))
	    print sys.exc_info()
	    return None
	# return the instance
	return self.modules[-1]
    
    def delete_module(self, instance):
	instance.close()
	# take away the reference AND remove (neat huh?)
	del self.modules[self.modules.index(instance)]
	
    def connect_modules(self, output_module, output_idx, input_module, input_idx):
	input_module.set_input(output_module.get_output(output_idx), input_idx)
	
    def disconnect_modules(self, input_module, input_idx):
	input_module.set_input(input_idx, None)
	
    def get_module_list(self):
	return self.module_manager.get_module_list()
	
    def pyco_exec(self, py_command):
	exec(py_command)
	
    def quit(self):
	print "quit called!"
	# take care of main window
	self.root.destroy()
	

# create main window
root = Tix.Tk()
dscas3_main(root)
# start event loop of main window
root.mainloop()


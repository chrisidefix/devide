import vtk

# parameters that need to be filled in:
# moduleName, vtkObjectName, progressText, inputDescriptions, outputDescrs
moduleSkeleton1 = "# class generated by " \
                  "DeVIDE::createDeVIDEModuleFromVTKObject\n" \
                  "from moduleMixins import simpleVTKClassModuleBase\n" \
                  "import vtk\n\n" \
                  "class %s(simpleVTKClassModuleBase):\n" \
                  "    def __init__(self, moduleManager):\n" \
                  "        simpleVTKClassModuleBase.__init__(\n" \
                  "            self, moduleManager,\n" \
                  "            vtk.%s(), '%s',\n" \
                  "            %s, %s)\n"

excludeList = ['vtkDataWriter', 'vtkDataReader']

def createDeVIDEModuleFromVTKObject(vtkObjName):
    """Returns tuple with first element the name of the module,
    the second element a string representing the complete code, the third
    element a tuple of categories to which the module belongs.
    """

    
    if vtkObjName.endswith('Writer'):
        moduleName = vtkObjName

        # with moduleName[:-6] we snip off the 'Writer'
        moduleText = moduleSkeleton1 % (moduleName, vtkObjName,
                                        'Writing %s.' % (moduleName[:-6],),
                                        (vtkObjName[:-6],), ())
        return (moduleName, moduleText, ('vtkWriters',))
        
    elif vtkObjName.endswith('Reader'):
        moduleName = vtkObjName

        # with moduleName[:-6] we snip off the 'Reader'
        moduleText = moduleSkeleton1 % (moduleName, vtkObjName,
                                        'Reading %s.' % (moduleName[:-6],),
                                        (), (vtkObjName[:-6],))
        return (moduleName, moduleText, ('vtkReaders',))

    else:
        return (None, None, None)
        


def main():
    list1 = [i for i in dir(vtk) if i.startswith('vtk')]
    list2 = []

    # objects that can be instantiated 
    for vtkobj in list1:
        try:
            a = getattr(vtk, vtkobj)()
        except:
            # if it can't be instantiated, we can't use it
            pass
        else:
            if a.IsA('vtkProcessObject') and vtkobj not in excludeList:
                if a.IsA('vtkSource'):
                    # all sources get appended
                    list2.append(vtkobj)
                elif vtkobj.endswith('Writer'):
                    # classes that aren't sources but are writers
                    # can also be appended
                    list2.append(vtkobj)

    # list2 will now be parsed and modules will be generated
    # we have to start our conditionals with the most specific cases
    # and work down to the more general cases.
    moduleListStrings = ['# Generated by '\
                         'DeVIDE::createDeVIDEModuleFromVTKObject\n',
                         'moduleList = {']
    for vtkObjName in list2:
        moduleName, moduleText, moduleCats = createDeVIDEModuleFromVTKObject(
            vtkObjName)
        
        if moduleName:
            f = open('%s.py' % (moduleName,), 'w')
            f.write(moduleText)
            moduleListStrings.append("'%s' : %s," % (moduleName, moduleCats))
            f.close()
            print "Wrote %s.py." % (moduleName,)

    if len(moduleListStrings):
        # snip off the last ,
        moduleListStrings[-1] = moduleListStrings[-1][:-1]
        moduleListStrings.append('}')
        moduleListString = '\n'.join(moduleListStrings)

        f = open('__init__.py', 'w')
        f.write(moduleListString)
        f.close()
        print "\nWrote __init__.py.\n"


if __name__ == '__main__':
    main()
